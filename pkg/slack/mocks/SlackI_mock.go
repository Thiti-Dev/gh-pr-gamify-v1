// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockSlackI is an autogenerated mock type for the SlackI type
type MockSlackI struct {
	mock.Mock
}

type MockSlackI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSlackI) EXPECT() *MockSlackI_Expecter {
	return &MockSlackI_Expecter{mock: &_m.Mock}
}

// Post provides a mock function with given fields: message
func (_m *MockSlackI) Post(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSlackI_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockSlackI_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - message string
func (_e *MockSlackI_Expecter) Post(message interface{}) *MockSlackI_Post_Call {
	return &MockSlackI_Post_Call{Call: _e.mock.On("Post", message)}
}

func (_c *MockSlackI_Post_Call) Run(run func(message string)) *MockSlackI_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSlackI_Post_Call) Return(_a0 error) *MockSlackI_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSlackI_Post_Call) RunAndReturn(run func(string) error) *MockSlackI_Post_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSlackI creates a new instance of MockSlackI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSlackI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSlackI {
	mock := &MockSlackI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
